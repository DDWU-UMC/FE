[
    {
      "part": "Plan",
      "partKorean": "기획",
      "info": "Plan 파트는 사용자 리서치와 시장 분석을 통해 서비스의 방향성과 핵심 기능을 기획하고, UX 설계를 바탕으로 Figma를 사용하여 와이어프레임 및 화면설계서를 제작합니다. 또한, Notion, Jira 등을 사용하여 프로젝트 일정 및 업무를 조율하며, 애자일 방식으로 팀원 간 원활한 협업을 이끌어 효율적인 개발을 지원합니다.",
      "icon": "/figma-icon.svg",
      "curriculum": [
        { "week": 0, "content": "IT 기획자란?" },
        { "week": 1, "content": "가설 설정 및 검증" },
        { "week": 2, "content": "전략 수립" },
        { "week": 3, "content": "역기획"},
        { "week": 4, "content": "서비스 기획(1/2)" },
        { "week": 5, "content": "서비스 기획(2/2)"},
        { "week": 6, "content": "와이어 프레임 작성" },
        { "week": 7, "content": "화면 설계서 작성" },
        { "week": 8, "content": "프로젝트 관리 및 협업" },
        { "week": 9, "content": "최종 기획안 점검 및 피드백" },
        { "week": 10, "content": "프로젝트 종료 및 회고" }
      ]
    },
    {
      "part": "Design",
      "partKorean": "디자인",
      "info": "Design 파트는 사용자의 요구와 서비스 기획에 맞춰 와이어프레임을 설계하고, 직관적이고 효율적인 사용자 경험을 제공하기 위해 UI 디자인을 합니다. 이 과정에서 사용자 흐름과 인터페이스의 가시성을 고려하여 피그마를 이용해 프로토타이핑을 진행하고, 이를 통해 개발자와의 UI 동작 방식을 공유합니다.",
      "icon": "/figma-icon.svg",
      "curriculum": [
        { "week": 0, "content": "피그마 기초 " },
        { "week": 1, "content": "클론 디자인 part1" },
        { "week": 2, "content": "클론 디자인 part2" },
        { "week": 3, "content": "리디자인 선정 및 문제 분석 part1" },
        { "week": 4, "content": "리디자인 문제 분석 part2 및 솔루션 도출" },
        { "week": 5, "content": "와이어 프레임 및 디자인 시스템 제작" },
        { "week": 6, "content": "UI 디자인" },
        { "week": 7, "content": "UI 디자인 마무리  및 프로토타입" },
        { "week": 8, "content": "UMC 항공 로고 디자인 및 디자인 시스템 제작" },
        { "week": 9, "content": "UMC 항공 UI 디자인" },
        { "week": 10, "content": "포트폴리오 작성 및 굿즈 디자인" }
      ]
    },
    {
      "part": "Android",
      "partKorean": "안드로이드",
      "info": "Android 파트는 사용자의 편의를 최우선으로 고려하여 Android 기반 애플리케이션 UI를 설계하고 개발합니다. Kotlin을 활용하며 XML 레이아웃을 통해 직관적이고 안정적인 사용자 인터페이스를 구현합니다.",
      "icon": "/kotlin-icon.svg",
      "curriculum": [
        { "week": 0, "content": "Android for Beginner" },
        { "week": 1, "content": "Platform & Layout" },
        { "week": 2, "content": "Activity와 Fragment" },
        { "week": 3, "content": "Essential Widget Compilation" },
        { "week": 4, "content": "Thread & Coroutine" },
        { "week": 5, "content": "LifeCycle" },
        { "week": 6, "content": "RecyclerView & Adapter" },
        { "week": 7, "content": "Database" },
        { "week": 8, "content": "Token" },
        { "week": 9, "content": "Network & RESTful API" },
        { "week": 10, "content": "Social Login" }
      ]
    },
    {
      "part": "Web",
      "partKorean": "웹",
      "info": "Web 파트는 React와 TypeScript를 활용하여 웹 애플리케이션을 개발합니다. 기초적인 HTML, CSS, JavaScript부터 시작하여, 컴포넌트 기반 개발, API 통신, 전역 상태 관리 등 실무에서 활용되는 기술들을 단계적으로 학습하며 효율적이고 확장 가능한 웹 서비스를 구현합니다.",
      "icon": "/react-icon.svg",
      "curriculum": [
        { "week": 0, "content": "React를 하기 전 알아야만 하는 HTML, CSS, JavaScript 지식" },
        { "week": 1, "content": "Type Script 의 기본" },
        { "week": 2, "content": "React 맛보기 - tsx, useState, contextAPI" },
        { "week": 3, "content": "Tailwind CSS, React Router, API 통신 완전 정복 - useEffect / type" },
        { "week": 4, "content": "상세 페이지 제작 및 커스텀 훅 패턴 익히기 - useNavigate, useParams, useLocation" },
        { "week": 5, "content": "React에서 폼 유효성 검사 완전 정복 - useForm, react-hook-form, Zod" },
        { "week": 6, "content": "API 호출 최적화하여 검색 페이지 구현하기, 사용자 친화적인 Multi Step Form을 활용하여 회원가입 기능 개선하기" },
        { "week": 7, "content": "TanStack Query 완전 정복 - 캐싱부터 무한 스크롤까지 (useQuery & useInfiniteQuery)" },
        { "week": 8, "content": "React 서버 상태 관리 - useMutation과 Optimistic Update" },
        { "week": 9, "content": "Redux Toolkit / Zustand" },
        { "week": 10, "content": "최적화된 React 앱 만들기 - useMemo, memo, useCallback" },
        { "week": 11, "content": "React 웹 사이트 배포하기 - 내 웹사이트를 세상과 공유하는 법 (배포)" },
        { "week": 12, "content": "PWA & WebView 실전 가이드 - 웹 앱을 네이티브처럼?" }
      ]
    },
    {
      "part": "Spring Boot",
      "partKorean": "스프링 부트",
      "info": "주어진 기획을 바탕으로 서버 아키텍처를 설계하고 개발합니다. 클라이언트와 데이터베이스를 연결하여 핵심 비즈니스 로직을 처리하며, QueryDSL과 JPA를 활용해 효율적인 데이터 접근 방식을 적용합니다. 또한, 인프라를 구축하고 배포를 수행하여 안정적인 서비스 운영을 지원합니다.",
      "icon": "/spring-icon.svg",
      "curriculum": [
        { "week": 0, "content": "서버 처음 해보기"},
        { "week": 1, "content": "Database 설계" },
        { "week": 2, "content": "실전 SQL - 어떤 Query를 작성해야 할까?" },
        { "week": 3, "content": "API URL의 설계 & 프로젝트 세팅" },
        { "week": 4, "content": "SpringBoot의 코어 개념" },
        { "week": 5, "content": "JPA 기초 및 프로젝트 구조" },
        { "week": 6, "content": "JPA 활용" },
        { "week": 7, "content": "API 응답 통일 & 에러 핸들러" },
        { "week": 8, "content": "API & Swagger & Annotation" },
        { "week": 9, "content": "API & Paging" },
        { "week": 10, "content": "로그인 및 회원 가입" },
        { "week": 11, "content": "CI/CD (GitHub Actions  + AWS EC2)" },
        { "week": 12, "content": "AWS S3 파일 업로드" }
      ]
    }
  ]
  